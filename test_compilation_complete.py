#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de compilaci√≥n autom√°tica completa
Verifica que se generen archivos .exe para Proteus autom√°ticamente
"""

import os
import sys

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from robot_lexical_analyzer import RobotLexicalAnalyzer

def test_automatic_compilation():
    """Test completo de compilaci√≥n autom√°tica"""
    print("üöÄ TEST DE COMPILACI√ìN AUTOM√ÅTICA")
    print("=" * 50)
    
    # C√≥digo de prueba para 3 motores
    robot_code = """
Robot brazo_industrial
brazo_industrial.repetir = 1
brazo_industrial.inicio

# Control de Base (Motor A)
brazo_industrial.base {
    girai 90
    espera 1
    giraf 45  
    espera 1
}

# Control de Hombro (Motor B)
brazo_industrial.hombro {
    girai 45
    espera 2
    giraf 30
    espera 1
}

# Control de Codo (Motor C)
brazo_industrial.codo {
    girai 60
    espera 1
    giraf 90
    espera 2
}

brazo_industrial.fin
"""
    
    print("üìù C√≥digo rob√≥tico a compilar:")
    print("-" * 30)
    print(robot_code)
    print("-" * 30)
    
    # Crear analizador
    analyzer = RobotLexicalAnalyzer()
    
    print("\nüîç Analizando c√≥digo...")
    
    # Analizar c√≥digo
    try:
        tokens, errors = analyzer.analyze(robot_code)
        
        if errors:
            print(f"‚ùå Errores encontrados: {errors}")
            return False
        
        print(f"‚úÖ An√°lisis l√©xico exitoso: {len(tokens)} tokens encontrados")
        
        # Generar y compilar
        print("\nüîß Generando ejecutable...")
        success, result = analyzer.generate_and_compile("brazo_industrial")
        
        print("\n" + "=" * 50)
        print("RESULTADO FINAL:")
        print("=" * 50)
        
        if success:
            print("üéØ ¬°COMPILACI√ìN AUTOM√ÅTICA EXITOSA!")
            print(result)
            
            # Verificar archivos generados
            print("\nüìÅ Archivos generados:")
            dosbox_path = os.path.join(os.getcwd(), "DOSBox2", "Tasm")
            if os.path.exists(dosbox_path):
                for file in os.listdir(dosbox_path):
                    if file.startswith("brazo_industrial"):
                        filepath = os.path.join(dosbox_path, file)
                        size = os.path.getsize(filepath)
                        print(f"  üìÑ {file} ({size} bytes)")
            
            return True
        else:
            print("‚ö†Ô∏è Compilaci√≥n no completada autom√°ticamente:")
            print(result)
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante el test: {str(e)}")
        return False

def test_direct_exe_generation():
    """Test directo del generador de ejecutables"""
    print("\n" + "=" * 50)
    print("üîß TEST DIRECTO DE GENERACI√ìN .EXE")
    print("=" * 50)
    
    try:
        from windows_native_compiler import WindowsAssemblyCompiler
        
        # C√≥digo ASM de prueba para 3 motores
        asm_code = """;Robot Control Program - 3 Motors
;Generated by Robot Lexical Analyzer

PORTA   EQU 00H     ; Puerto A - Motor Base  
PORTB   EQU 02H     ; Puerto B - Motor Hombro
PORTC   EQU 04H     ; Puerto C - Motor Codo
Config  EQU 06H     ; Puerto configuracion 8255

DATA_SEG    SEGMENT
DATA_SEG    ENDS

CODE_SEG    SEGMENT
   ASSUME CS: CODE_SEG, DS:DATA_SEG

START:
    ; Inicializar
    MOV   AX, DATA_SEG
    MOV   DS, AX
    
    ; Configurar 8255 - todos puertos como salida
    MOV   DX, Config
    MOV   AL, 80H
    OUT   DX, AL
    
    ; Motor A (Base) - Secuencia de pasos
    MOV   DX, PORTA
    MOV   AL, 06H      ; Paso 1
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 0CH      ; Paso 2  
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 09H      ; Paso 3
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 03H      ; Paso 4
    OUT   DX, AL
    CALL  DELAY
    
    ; Motor B (Hombro) - Secuencia de pasos
    MOV   DX, PORTB
    MOV   AL, 06H      ; Paso 1
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 0CH      ; Paso 2
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 09H      ; Paso 3
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 03H      ; Paso 4
    OUT   DX, AL
    CALL  DELAY
    
    ; Motor C (Codo) - Secuencia de pasos
    MOV   DX, PORTC
    MOV   AL, 06H      ; Paso 1
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 0CH      ; Paso 2
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 09H      ; Paso 3
    OUT   DX, AL
    CALL  DELAY
    MOV   AL, 03H      ; Paso 4
    OUT   DX, AL
    CALL  DELAY
    
    ; Terminar programa
    MOV    AH,4CH
    MOV    AL,0
    INT    21H

DELAY:
    ; Delay loop para control de velocidad
    PUSH  CX
    MOV   CX, 0FFFFH
DELAY_LOOP:
    LOOP  DELAY_LOOP
    POP   CX
    RET

CODE_SEG    ENDS
   END  START
"""
        
        # Compilar directamente
        compiler = WindowsAssemblyCompiler()
        success, message = compiler.compile_to_exe(asm_code, "robot_3_motores")
        
        print(f"‚úÖ Resultado: {'√âXITO' if success else 'ADVERTENCIA'}")
        print(f"üìù Mensaje: {message}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Error en test directo: {str(e)}")
        return False

if __name__ == "__main__":
    print("üéØ SISTEMA DE COMPILACI√ìN AUTOM√ÅTICA PARA PROTEUS")
    print("üéØ Genera archivos .EXE para simulaci√≥n de brazo rob√≥tico")
    print("üéØ Control de 3 motores paso a paso con 8255 PPI")
    print("\n")
    
    # Test 1: Compilaci√≥n completa desde c√≥digo rob√≥tico
    test1_passed = test_automatic_compilation()
    
    # Test 2: Generaci√≥n directa de ejecutable
    test2_passed = test_direct_exe_generation()
    
    print("\n" + "=" * 60)
    print("RESUMEN DE TESTS")
    print("=" * 60)
    print(f"üìä Test compilaci√≥n completa: {'‚úÖ PAS√ì' if test1_passed else '‚ö†Ô∏è  PARCIAL'}")
    print(f"üìä Test generaci√≥n directa:   {'‚úÖ PAS√ì' if test2_passed else '‚ùå FALL√ì'}")
    
    if test1_passed or test2_passed:
        print("\nüéØ ¬°SISTEMA LISTO PARA PROTEUS!")
        print("üí° Los archivos .exe generados pueden usarse en simulaci√≥n")
        print("üîß Control de motores paso a paso implementado correctamente")
    else:
        print("\n‚ö†Ô∏è Sistema necesita ajustes adicionales")
    
    print("\nPresiona Enter para continuar...")
    input()
