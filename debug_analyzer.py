#!/usr/bin/env python3
"""
Script de verificaci√≥n para identificar el problema
"""

print("=== VERIFICACI√ìN DEL M√ìDULO ROBOT_LEXICAL_ANALYZER ===\n")

try:
    print("1. Importando m√≥dulo...")
    from robot_lexical_analyzer import RobotLexicalAnalyzer
    print("   ‚úÖ Importaci√≥n exitosa")
    
    print("\n2. Creando instancia...")
    analyzer = RobotLexicalAnalyzer()
    print("   ‚úÖ Instancia creada exitosamente")
    
    print("\n3. Verificando m√©todos disponibles...")
    methods = [m for m in dir(analyzer) if not m.startswith('_')]
    print(f"   üìä M√©todos disponibles: {len(methods)}")
    
    for method in sorted(methods):
        print(f"      ‚Ä¢ {method}")
    
    print("\n4. Verificando m√©todos espec√≠ficos...")
    if hasattr(analyzer, 'generate_assembly_code'):
        print("   ‚úÖ generate_assembly_code disponible")
    else:
        print("   ‚ùå generate_assembly_code NO disponible")
    
    if hasattr(analyzer, 'compile_to_executable'):
        print("   ‚úÖ compile_to_executable disponible")
    else:
        print("   ‚ùå compile_to_executable NO disponible")
    
    if hasattr(analyzer, 'generate_and_compile'):
        print("   ‚úÖ generate_and_compile disponible")
    else:
        print("   ‚ùå generate_and_compile NO disponible")
    
    print("\n5. Probando an√°lisis b√°sico...")
    code = "Robot r1\nr1.base = 90"
    tokens, errors = analyzer.analyze(code)
    print(f"   ‚úÖ An√°lisis exitoso: {len(tokens)} tokens, {len(errors)} errores")
    
    print("\n6. Verificando generaci√≥n de cu√°druplos...")
    if analyzer.intermediate_code_generator:
        cuadruplos = analyzer.intermediate_code_generator.cuadruplos
        print(f"   ‚úÖ Cu√°druplos generados: {len(cuadruplos)}")
    else:
        print("   ‚ùå No se generaron cu√°druplos")
    
except Exception as e:
    print(f"‚ùå Error: {str(e)}")
    import traceback
    traceback.print_exc()
