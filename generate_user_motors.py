#!/usr/bin/env python3
"""
Generador autom√°tico para Proteus con el c√≥digo de motores del usuario
"""
import os
from robot_lexical_analyzer import RobotLexicalAnalyzer

def generate_motor_executable():
    """Genera el ejecutable para el c√≥digo de motores del usuario"""
    
    # C√≥digo del usuario
    user_code = """Robot r1

r1.velocidad = 2       
r1.base = 45           
r1.hombro = 120        
r1.codo = 90           
r1.espera = 1"""
    
    print("ü§ñ ===============================================")
    print("ü§ñ GENERANDO EJECUTABLE PARA PROTEUS")
    print("ü§ñ ===============================================")
    print("üìù C√≥digo del usuario:")
    print(user_code)
    print("ü§ñ ===============================================")
    
    # Crear analizador
    analyzer = RobotLexicalAnalyzer()
    
    try:
        # Analizar c√≥digo
        print("üîç Analizando c√≥digo...")
        tokens, errors = analyzer.analyze(user_code)
        
        if errors:
            print(f"‚ùå Errores encontrados: {len(errors)}")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
            return False
        
        print(f"‚úÖ C√≥digo v√°lido - {len(tokens)} tokens encontrados")
        
        # Generar ejecutable DOS Real
        print("üéØ Generando ejecutable DOS Real para Proteus...")
        success, message = analyzer.generate_and_compile_dos_real("motor_movement")
        
        if success:
            # Verificar archivo generado
            tasm_path = os.path.join(os.getcwd(), "DOSBox2", "Tasm")
            exe_path = os.path.join(tasm_path, "motor_movement.exe")
            
            if os.path.exists(exe_path):
                file_size = os.path.getsize(exe_path)
                
                print(f"‚úÖ ¬°EJECUTABLE GENERADO EXITOSAMENTE!")
                print(f"üìÅ Archivo: motor_movement.exe")
                print(f"üìÇ Ubicaci√≥n: {exe_path}")
                print(f"üìè Tama√±o: {file_size} bytes")
                
                # Verificar header MZ
                with open(exe_path, 'rb') as f:
                    header = f.read(2)
                    if header == b'MZ':
                        print(f"‚úÖ Header MZ v√°lido - MS-DOS ejecutable aut√©ntico")
                    else:
                        print(f"‚ö†Ô∏è Header: {header} (esperado: MZ)")
                
                print(f"\nüéØ CONFIGURACI√ìN PROTEUS REQUERIDA:")
                print(f"=" * 50)
                print(f"1. üñ•Ô∏è  PROCESADOR: 8086 (NO 8088, NO x86)")
                print(f"   ‚Ä¢ Modelo: 8086 Real Mode")
                print(f"   ‚Ä¢ Frecuencia: 4.77MHz (est√°ndar)")
                print(f"   ‚Ä¢ Configuraci√≥n: Real Mode")
                print(f"\n2. üîå 8255 PPI (Programmable Peripheral Interface):")
                print(f"   ‚Ä¢ Direcci√≥n base: 0300h")
                print(f"   ‚Ä¢ Puerto A (PA): 0300h ‚Üí Control Base")
                print(f"   ‚Ä¢ Puerto B (PB): 0301h ‚Üí Control Hombro")
                print(f"   ‚Ä¢ Puerto C (PC): 0302h ‚Üí Control Codo")
                print(f"   ‚Ä¢ Control: 0303h ‚Üí Configuraci√≥n")
                print(f"\n3. ü§ñ MOTORES PASO A PASO:")
                print(f"   ‚Ä¢ 3 motores conectados v√≠a ULN2003A")
                print(f"   ‚Ä¢ Base: ULN2003A conectado a PA (0300h)")
                print(f"   ‚Ä¢ Hombro: ULN2003A conectado a PB (0301h)")
                print(f"   ‚Ä¢ Codo: ULN2003A conectado a PC (0302h)")
                print(f"\n4. üìÇ CARGAR PROGRAMA:")
                print(f"   ‚Ä¢ Archivo: motor_movement.exe")
                print(f"   ‚Ä¢ Formato: MS-DOS executable")
                print(f"   ‚Ä¢ Cargar en: 8086 processor")
                print(f"\n5. ‚ö° SECUENCIA DE MOVIMIENTOS ESPERADA:")
                print(f"   ‚Ä¢ Configurar velocidad a 2")
                print(f"   ‚Ä¢ Mover base a 45¬∞")
                print(f"   ‚Ä¢ Mover hombro a 120¬∞")
                print(f"   ‚Ä¢ Mover codo a 90¬∞")
                print(f"   ‚Ä¢ Esperar 1 segundo")
                print(f"=" * 50)
                
                # Mostrar c√≥digo ASM relevante
                print(f"\nüìã VERIFICANDO COMANDOS DE MOTOR EN ASM:")
                asm_code, _ = analyzer.generate_assembly_code("motor_movement")
                if asm_code:
                    motor_lines = []
                    lines = asm_code.split('\n')
                    for i, line in enumerate(lines):
                        if any(port in line.upper() for port in ['0300', '0301', '0302', 'OUT DX']):
                            motor_lines.append(f"   {i+1:3}. {line.strip()}")
                    
                    if motor_lines:
                        print(f"‚úÖ Comandos de motor encontrados en ASM:")
                        for cmd in motor_lines[:10]:  # Mostrar primeros 10
                            print(cmd)
                        if len(motor_lines) > 10:
                            print(f"   ... y {len(motor_lines) - 10} comandos m√°s")
                    else:
                        print(f"‚ö†Ô∏è No se encontraron comandos OUT DX en el ASM")
                
                return True
            else:
                print(f"‚ùå Archivo no encontrado: {exe_path}")
                return False
        else:
            print(f"‚ùå Error generando ejecutable: {message}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante la generaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    generate_motor_executable()
