#!/usr/bin/env python3
"""
Script de prueba para el generador de c√≥digo ensamblador
"""

from robot_lexical_analyzer import RobotLexicalAnalyzer
from assembly_generator import AssemblyGenerator, DOSBoxController

def test_assembly_generation():
    """Prueba la generaci√≥n de c√≥digo ensamblador"""
    print("=== PRUEBA DE GENERACI√ìN DE C√ìDIGO ENSAMBLADOR ===\n")
    
    # C√≥digo de prueba
    code = """Robot r1
r1.repetir = 2
r1.inicio
r1.velocidad = 2
r1.base = 90
r1.hombro = 45
r1.espera = 1
r1.fin"""
    
    print("C√≥digo fuente:")
    for i, line in enumerate(code.split('\n'), 1):
        if line.strip():
            print(f"  {i}. {line}")
    
    # Analizar c√≥digo
    analyzer = RobotLexicalAnalyzer()
    tokens, errors = analyzer.analyze(code)
    
    if errors:
        print(f"\n‚ùå Errores en el an√°lisis: {errors}")
        return False
    
    print(f"\n‚úÖ An√°lisis exitoso: {len(tokens)} tokens procesados")
    
    # Generar c√≥digo ensamblador
    if analyzer.intermediate_code_generator and analyzer.intermediate_code_generator.cuadruplos:
        print(f"‚úÖ Cu√°druplos generados: {len(analyzer.intermediate_code_generator.cuadruplos)}")
        
        # Generar c√≥digo ensamblador
        generator = AssemblyGenerator()
        asm_code = generator.generate_assembly(analyzer.intermediate_code_generator.cuadruplos, "test_robot")
        
        print("\n=== C√ìDIGO ENSAMBLADOR GENERADO ===")
        print(asm_code)
        
        # Guardar c√≥digo ensamblador
        output_file = "/home/xavier/lexic/DOSBox2/Tasm/test_robot.asm"
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(asm_code)
            print(f"\n‚úÖ C√≥digo ensamblador guardado en: {output_file}")
            
            return True
        except Exception as e:
            print(f"\n‚ùå Error al guardar: {str(e)}")
            return False
    else:
        print("\n‚ùå No se generaron cu√°druplos")
        return False

def test_simple_code():
    """Prueba con c√≥digo m√°s simple"""
    print("\n\n=== PRUEBA CON C√ìDIGO SIMPLE ===\n")
    
    code = """Robot r1
r1.base = 90
r1.hombro = 45
r1.espera = 2"""
    
    print("C√≥digo fuente:")
    for i, line in enumerate(code.split('\n'), 1):
        if line.strip():
            print(f"  {i}. {line}")
    
    # Analizar c√≥digo
    analyzer = RobotLexicalAnalyzer()
    tokens, errors = analyzer.analyze(code)
    
    if errors:
        print(f"\n‚ùå Errores en el an√°lisis: {errors}")
        return False
    
    print(f"\n‚úÖ An√°lisis exitoso: {len(tokens)} tokens procesados")
    
    # Generar c√≥digo ensamblador
    if analyzer.intermediate_code_generator and analyzer.intermediate_code_generator.cuadruplos:
        print(f"‚úÖ Cu√°druplos generados: {len(analyzer.intermediate_code_generator.cuadruplos)}")
        
        # Generar c√≥digo ensamblador
        asm_code, error = analyzer.generate_assembly_code("simple_robot")
        
        if error:
            print(f"\n‚ùå Error al generar ensamblador: {error}")
            return False
        
        print("\n=== C√ìDIGO ENSAMBLADOR GENERADO ===")
        print(asm_code)
        
        # Guardar c√≥digo ensamblador
        output_file = "/home/xavier/lexic/DOSBox2/Tasm/simple_robot.asm"
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(asm_code)
            print(f"\n‚úÖ C√≥digo ensamblador guardado en: {output_file}")
            
            return True
        except Exception as e:
            print(f"\n‚ùå Error al guardar: {str(e)}")
            return False
    else:
        print("\n‚ùå No se generaron cu√°druplos")
        return False

def test_dosbox_integration():
    """Prueba la integraci√≥n con DOSBox (solo si est√° disponible)"""
    print("\n\n=== PRUEBA DE INTEGRACI√ìN CON DOSBOX ===\n")
    
    # Verificar si DOSBox est√° disponible
    dosbox_path = "/home/xavier/lexic/DOSBox2"
    if not os.path.exists(dosbox_path):
        print(f"‚ùå DOSBox no encontrado en: {dosbox_path}")
        return False
    
    print(f"‚úÖ DOSBox encontrado en: {dosbox_path}")
    
    # Verificar archivos de TASM
    tasm_files = ["TASM.EXE", "TLINK.EXE"]
    tasm_path = os.path.join(dosbox_path, "Tasm")
    
    for file in tasm_files:
        file_path = os.path.join(tasm_path, file)
        if os.path.exists(file_path):
            print(f"‚úÖ {file} encontrado")
        else:
            print(f"‚ùå {file} no encontrado en: {file_path}")
            return False
    
    print("\n‚úÖ Todos los archivos de TASM est√°n disponibles")
    print("‚ÑπÔ∏è  La compilaci√≥n autom√°tica requiere wine en Linux")
    
    return True

def main():
    """Ejecuta todas las pruebas"""
    print("PRUEBAS DEL GENERADOR DE C√ìDIGO ENSAMBLADOR")
    print("=" * 60)
    
    results = []
    
    # Prueba 1: Generaci√≥n b√°sica
    results.append(test_assembly_generation())
    
    # Prueba 2: C√≥digo simple
    results.append(test_simple_code())
    
    # Prueba 3: Integraci√≥n DOSBox
    results.append(test_dosbox_integration())
    
    # Resumen
    print("\n" + "=" * 60)
    print("RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ Pruebas exitosas: {passed}/{total}")
    print(f"‚ùå Pruebas fallidas: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        print("üîß El generador de c√≥digo ensamblador est√° listo para usar")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron")
        print("üîç Revise los errores antes de continuar")
    
    return passed == total

if __name__ == "__main__":
    import os
    main()
