#!/usr/bin/env python3
"""
Test directo del c√≥digo de movimiento de motores
"""
import sys
import os

# Agregar el directorio actual al path
sys.path.append(os.getcwd())

from robot_lexical_analyzer import RobotLexicalAnalyzer

def test_motor_movement():
    """Prueba el c√≥digo de movimiento de motores"""
    
    # C√≥digo de prueba
    test_code = """Robot r1

r1.velocidad = 2       
r1.base = 45           
r1.hombro = 120        
r1.codo = 90           
r1.espera = 1"""
    
    print("ü§ñ ===============================================")
    print("ü§ñ PRUEBA DE MOVIMIENTO DE MOTORES")
    print("ü§ñ ===============================================")
    print(f"üìù C√≥digo a analizar:")
    print(test_code)
    print("ü§ñ ===============================================")
    
    # Crear analizador
    analyzer = RobotLexicalAnalyzer()
    
    try:
        # Analizar c√≥digo
        print("üîç Analizando c√≥digo...")
        tokens, errors = analyzer.analyze(test_code)
        
        print(f"\nüìä RESULTADOS DEL AN√ÅLISIS:")
        print(f"‚Ä¢ Tokens encontrados: {len(tokens)}")
        print(f"‚Ä¢ Errores encontrados: {len(errors)}")
        
        # Mostrar tokens
        if tokens:
            print(f"\nüéØ TOKENS DETECTADOS:")
            for i, token in enumerate(tokens, 1):
                print(f"{i:2}. {token}")
        
        # Mostrar errores
        if errors:
            print(f"\n‚ùå ERRORES DETECTADOS:")
            for i, error in enumerate(errors, 1):
                print(f"{i:2}. {error}")
        
        # Generar salida formateada
        print(f"\nüìÑ SALIDA COMPLETA:")
        print("=" * 50)
        output = analyzer.get_formatted_output()
        print(output)
        print("=" * 50)
        
        # Intentar generar c√≥digo ensamblador
        print(f"\n‚öôÔ∏è GENERANDO C√ìDIGO ENSAMBLADOR...")
        try:
            asm_code, asm_error = analyzer.generate_assembly_code("test_motor")
            
            if asm_code and not asm_error:
                print(f"‚úÖ C√≥digo ensamblador generado exitosamente")
                print(f"\nüìã C√ìDIGO ENSAMBLADOR (primeras 20 l√≠neas):")
                lines = asm_code.split('\n')
                for i, line in enumerate(lines[:20], 1):
                    print(f"{i:2}. {line}")
                if len(lines) > 20:
                    print(f"... y {len(lines) - 20} l√≠neas m√°s")
                
                # Verificar si contiene movimientos de motores
                print(f"\nüîç VERIFICANDO MOVIMIENTOS DE MOTORES:")
                motor_commands = []
                for line in lines:
                    if any(port in line.upper() for port in ['0300', '0301', '0302']):
                        motor_commands.append(line.strip())
                
                if motor_commands:
                    print(f"‚úÖ Se encontraron {len(motor_commands)} comandos de motor:")
                    for cmd in motor_commands:
                        print(f"   ‚Ä¢ {cmd}")
                else:
                    print(f"‚ùå NO se encontraron comandos de motor en el c√≥digo ASM")
                    print(f"   Esto explica por qu√© no se mueven los motores")
                
            elif asm_error:
                print(f"‚ùå Error generando ASM: {asm_error}")
            else:
                print(f"‚ùå No se pudo generar c√≥digo ensamblador")
                
        except Exception as asm_exception:
            print(f"‚ùå Excepci√≥n generando ASM: {asm_exception}")
        
        # Verificar sintaxis espec√≠fica
        print(f"\nüîé VERIFICACI√ìN DE SINTAXIS:")
        
        # Verificar declaraci√≥n de robot
        robot_declared = any('Robot' in str(token) and 'r1' in str(token) for token in tokens)
        print(f"‚Ä¢ Robot declarado: {'‚úÖ' if robot_declared else '‚ùå'}")
        
        # Verificar asignaciones
        assignments = [token for token in tokens if 'ASSIGNMENT' in str(token) or '=' in str(token)]
        print(f"‚Ä¢ Asignaciones encontradas: {len(assignments)}")
        
        # Verificar componentes
        components = ['base', 'hombro', 'codo', 'velocidad', 'espera']
        found_components = []
        for component in components:
            if any(component in str(token) for token in tokens):
                found_components.append(component)
        
        print(f"‚Ä¢ Componentes reconocidos: {found_components}")
        
        # Verificar valores num√©ricos
        numeric_values = [token for token in tokens if 'NUMBER' in str(token) or any(char.isdigit() for char in str(token))]
        print(f"‚Ä¢ Valores num√©ricos: {len(numeric_values)}")
        
        return len(errors) == 0, errors
        
    except Exception as e:
        print(f"‚ùå Error durante el an√°lisis: {e}")
        import traceback
        traceback.print_exc()
        return False, [str(e)]

if __name__ == "__main__":
    test_motor_movement()
